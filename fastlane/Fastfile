require 'xcodeproj'

fastlane_version "1.39.0"

def persistent(*paths)
  File.join(Fastlane::FastlaneFolder.path, 'persistent', *paths)
end

def into_platform &block
  dir = File.join('..', 'platforms', ENV["FASTLANE_PLATFORM_NAME"], 'fastlane')
  FileUtils.mkdir_p dir
  Dir.chdir(dir) do
    block.call
  end
end

platform :ios do
  before_all do
    BUILD_MODE = build_mode
    dart
    cordova
    sh('cordova prepare ios')

    if is_ci?
      keychainName = Fastlane::Actions.sh("security default-keychain", log: false).match(/.*\/([^\/]+)\"/)[1]
      puts "Using keychain: #{keychainName}"
      import_certificate keychain_name: keychainName, certificate_path: persistent('ios', "Distribution.cer")
      import_certificate keychain_name: keychainName, certificate_path: persistent('ios', "Distribution.p12"), certificate_password: ENV["IOS_DISTRIBUTION_KEY_PASSWORD"]
    end

    def is_adhoc?
      !["release", "beta"].include? BUILD_MODE
    end

    into_platform do
      if ENV["BUILD_NUM"] != nil then
        increment_build_number(
        build_number: ENV["BUILD_NUM"]
        )
      end

      sigh(
      app_identifier: ENV['IOS_BUNDLE_ID'],
      adhoc: is_adhoc?
      )

      update_project_provisioning(
      xcodeproj: "#{ENV["APPLICATION_NAME"]}.xcodeproj",
      target_filter: ".*",
      build_configuration: "Release"
      )

      gym(
      scheme: ENV["APPLICATION_NAME"],
      configuration: "Release",
      use_legacy_build_api: is_adhoc?,
      include_bitcode: false,
      silent: true
      )

      if is_ci? then
        crashlytics(
        crashlytics_path: "./Pods/Crashlytics/Crashlytics.framework",
        api_token: ENV["FABRIC_API_KEY"],
        build_secret: ENV["FABRIC_BUILD_SECRET"],
        notes_path: ENV["RELEASE_NOTE_PATH"],
        groups: ENV["FABRIC_CRASHLYTICS_GROUPS"],
        ipa_path: "#{ENV["APPLICATION_NAME"]}.ipa"
        )
      end
    end
  end

  desc "Deploy a new version to the App Store"
  lane :build do
    # deliver(skip_deploy: true, force: true)
    # frameit
  end
end

platform :android do
  before_all do
    before_platform

    puts "Run in android before lanes"
    sleep 5
  end

  desc "Runs all the tests"
  lane :test do
    puts "Run android test"
    sleep 5
    # test and take screenshots
  end

  desc "Submit a new build to Crashlytics"
  lane :debug do
    puts "Run android debug"
    sleep 5
    # something
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    puts "Run android beta"
    sleep 5
    # sh "your_script.sh"
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    puts "Run android release"
    sleep 5
    # deliver(skip_deploy: true, force: true)
    # frameit
  end
end

after_all do
  puts "Run after platforms"
end
