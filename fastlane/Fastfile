require 'xcodeproj'

fastlane_version "1.39.0"

def persistent(*paths)
  File.absolute_path(File.join('persistent', *paths))
end

def into_platform &block
  dir = File.join('..', 'platforms', ENV["FASTLANE_PLATFORM_NAME"], 'fastlane')
  FileUtils.mkdir_p dir
  Dir.chdir(dir) do
    block.call
  end
end

before_all do
  into_mode
  dart
  cordova
end

platform :ios do
  lane :build do
    sh('cordova prepare ios')

    if is_ci?
      keychainName = Fastlane::Actions.sh("security default-keychain", log: false).match(/.*\/([^\/]+)\"/)[1]
      puts "Using keychain: #{keychainName}"
      import_certificate keychain_name: keychainName, certificate_path: persistent('ios', "Distribution.cer")
      import_certificate keychain_name: keychainName, certificate_path: persistent('ios', "Distribution.p12"), certificate_password: ENV["IOS_DISTRIBUTION_KEY_PASSWORD"]
    end

    def is_adhoc?
      !["release", "beta"].include? lane_context[Actions::SharedValues::BUILD_MODE]
    end

    into_platform do
      if ENV["BUILD_NUM"] != nil then
        increment_build_number(
        build_number: ENV["BUILD_NUM"]
        )
      end

      sigh(
      app_identifier: ENV['IOS_BUNDLE_ID'],
      adhoc: is_adhoc?
      )

      update_project_provisioning(
      xcodeproj: "#{ENV["APPLICATION_NAME"]}.xcodeproj",
      target_filter: ".*",
      build_configuration: "Release"
      )

      gym(
      scheme: ENV["APPLICATION_NAME"],
      configuration: "Release",
      use_legacy_build_api: is_adhoc?,
      include_bitcode: false,
      silent: true
      )

      if is_ci? && is_adhoc? then
        crashlytics(
        crashlytics_path: "./Pods/Crashlytics/Crashlytics.framework",
        api_token: ENV["FABRIC_API_KEY"],
        build_secret: ENV["FABRIC_BUILD_SECRET"],
        notes_path: ENV["RELEASE_NOTE_PATH"],
        groups: ENV["FABRIC_CRASHLYTICS_GROUPS"],
        ipa_path: "#{ENV["APPLICATION_NAME"]}.ipa"
        )
      end
    end
  end
end

platform :android do
  lane :build do
    def is_multi?
      ["release", "beta"].include? lane_context[Actions::SharedValues::BUILD_MODE]
    end

    android_build(
    keystore: persistent('android', 'keystore'),
    multi_apks: is_multi?,
    sdks: [
      'platform-tools',
      'tools',
      'android-21',
      'android-22',
      'extra-google-m2repository',
      'extra-android-support',
      'extra-android-m2repository',
      'build-tools-21.1.2',
      'build-tools-22.0.1'
    ])

    into_platform do
      if is_ci? && !is_multi? then
        sh('./gradlew crashlyticsUploadDistributionRelease')
      end
    end
  end
end

after_all do
  puts "Run after platforms"
end
